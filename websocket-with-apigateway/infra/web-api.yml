AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM Swagger.

Parameters:
  Env:
    Type: String
    Default: dev

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub apigateway-websocket-${Env}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  ClientConnectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub client-connection-${Env}
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

# Lambda Function
  WebsocketConnectLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.10
      Handler: lambda_websocket_connect.lambda_handler
      CodeUri: lambda.zip
      FunctionName: !Sub apigateway-websocket-connect-${Env}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          CLIENT_CONNECTION_TABLE: !Ref ClientConnectionTable

  WebsocketDisconnectLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.10
      Handler: lambda_websocket_disconnect.lambda_handler
      CodeUri: lambda.zip
      FunctionName: !Sub apigateway-websocket-disconnect-${Env}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          CLIENT_CONNECTION_TABLE: !Ref ClientConnectionTable

  WebsocketSendLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.10
      Handler: lambda_websocket_send.lambda_handler
      CodeUri: lambda.zip
      FunctionName: !Sub apigateway-websocket-send-${Env}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          CLIENT_CONNECTION_TABLE: !Ref ClientConnectionTable

# APIGateway for Websocket
  ApiGatewayWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub apigateway-websocket-${Env}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"

  WebsocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - WebsocketConnectLambdaFunction
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsocketConnectLambdaFunction.Arn}/invocations

  WebsocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      AuthorizationType: AWS_IAM
      RouteKey: $connect
      Target: !Sub integrations/${WebsocketConnectIntegration}

  WebsocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - WebsocketDisconnectLambdaFunction
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsocketDisconnectLambdaFunction.Arn}/invocations

  WebsocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      RouteKey: $disconnect
      Target: !Sub integrations/${WebsocketDisconnectIntegration}

  WebsocketSendIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - WebsocketSendLambdaFunction
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsocketSendLambdaFunction.Arn}/invocations

  WebsocketSendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      RouteKey: sendMessage
      Target: !Sub integrations/${WebsocketSendIntegration}

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: production
      ApiId: !Ref ApiGatewayWebSocket
      AutoDeploy: true

# Lambda Function Permission
  WebsocketConnectLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGatewayWebSocket
      - WebsocketConnectLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebsocketConnectLambdaFunction
      Principal: apigateway.amazonaws.com

  WebsocketDisconnectLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGatewayWebSocket
      - WebsocketDisconnectLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebsocketDisconnectLambdaFunction
      Principal: apigateway.amazonaws.com

  WebsocketSendtLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGatewayWebSocket
      - WebsocketSendLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebsocketSendLambdaFunction
      Principal: apigateway.amazonaws.com

Outputs:
  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Sub "wss://${ApiGatewayWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
